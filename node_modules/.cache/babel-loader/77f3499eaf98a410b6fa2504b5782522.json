{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = normalizeSelect;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/*\r\n* sdk relies heavily on sys metadata\r\n* so we cannot omit the sys property on sdk level entirely\r\n* and we have to ensure that at least `id` and `type` are present\r\n* */\n\n\nfunction normalizeSelect(query) {\n  if (!query.select) {\n    return query;\n  } // The selection of fields for the query is limited\n  // Get the different parts that are listed for selection\n\n\n  const allSelects = Array.isArray(query.select) ? query.select : query.select.split(','); // Move the parts into a set for easy access and deduplication\n\n  const selectedSet = new Set(allSelects); // If we already select all of `sys` we can just return\n  // since we're anyway fetching everything that is needed\n\n  if (selectedSet.has('sys')) {\n    return query;\n  } // We don't select `sys` so we need to ensure the minimum set\n\n\n  selectedSet.add('sys.id');\n  selectedSet.add('sys.type'); // Reassign the normalized sys properties\n\n  return _objectSpread(_objectSpread({}, query), {}, {\n    select: [...selectedSet].join(',')\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","normalizeSelect","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","obj","configurable","writable","query","select","allSelects","Array","isArray","split","selectedSet","Set","has","add","join"],"sources":["C:/webKode/my_repo/node_modules/contentful/dist/es-modules/utils/normalize-select.js"],"sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = normalizeSelect;\r\n\r\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\r\n\r\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\r\n\r\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\r\n\r\n/*\r\n* sdk relies heavily on sys metadata\r\n* so we cannot omit the sys property on sdk level entirely\r\n* and we have to ensure that at least `id` and `type` are present\r\n* */\r\nfunction normalizeSelect(query) {\r\n  if (!query.select) {\r\n    return query;\r\n  } // The selection of fields for the query is limited\r\n  // Get the different parts that are listed for selection\r\n\r\n\r\n  const allSelects = Array.isArray(query.select) ? query.select : query.select.split(','); // Move the parts into a set for easy access and deduplication\r\n\r\n  const selectedSet = new Set(allSelects); // If we already select all of `sys` we can just return\r\n  // since we're anyway fetching everything that is needed\r\n\r\n  if (selectedSet.has('sys')) {\r\n    return query;\r\n  } // We don't select `sys` so we need to ensure the minimum set\r\n\r\n\r\n  selectedSet.add('sys.id');\r\n  selectedSet.add('sys.type'); // Reassign the normalized sys properties\r\n\r\n  return _objectSpread(_objectSpread({}, query), {}, {\r\n    select: [...selectedSet].join(',')\r\n  });\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}