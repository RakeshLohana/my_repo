{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createContentfulApi;\n\nvar _contentfulSdkCore = require(\"contentful-sdk-core\");\n\nvar _entities = _interopRequireDefault(require(\"./entities\"));\n\nvar _pagedSync = _interopRequireDefault(require(\"./paged-sync\"));\n\nvar _normalizeSelect = _interopRequireDefault(require(\"./utils/normalize-select\"));\n\nvar _validateTimestamp = _interopRequireDefault(require(\"./utils/validate-timestamp\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nconst ASSET_KEY_MAX_LIFETIME = 48 * 60 * 60;\n/**\r\n * Creates API object with methods to access functionality from Contentful's\r\n * Delivery API\r\n * @private\r\n * @param {Object} params - API initialization params\r\n * @prop {Object} http - HTTP client instance\r\n * @prop {Object} entities - Object with wrapper methods for each kind of entity\r\n * @prop {Function} getGlobalOptions - Link resolver preconfigured with global setting\r\n * @return {ClientAPI}\r\n */\n\nfunction createContentfulApi(_ref) {\n  let {\n    http,\n    getGlobalOptions\n  } = _ref;\n  const {\n    wrapSpace\n  } = _entities.default.space;\n  const {\n    wrapContentType,\n    wrapContentTypeCollection\n  } = _entities.default.contentType;\n  const {\n    wrapEntry,\n    wrapEntryCollection\n  } = _entities.default.entry;\n  const {\n    wrapAsset,\n    wrapAssetCollection\n  } = _entities.default.asset;\n  const {\n    wrapTag,\n    wrapTagCollection\n  } = _entities.default.tag;\n  const {\n    wrapAssetKey\n  } = _entities.default.assetKey;\n  const {\n    wrapLocaleCollection\n  } = _entities.default.locale;\n\n  const notFoundError = id => {\n    const error = new Error('The resource could not be found.');\n    error.sys = {\n      type: 'Error',\n      id: 'NotFound'\n    };\n    error.details = {\n      type: 'Entry',\n      id: id,\n      environment: getGlobalOptions().environment,\n      space: getGlobalOptions().space\n    };\n    return error;\n  };\n  /**\r\n   * Gets the Space which the client is currently configured to use\r\n   * @memberof ContentfulClientAPI\r\n   * @return {Promise<Entities.Space>} Promise for a Space\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   * // returns the space object with the above <space-id>\r\n   * const space = await client.getSpace()\r\n   * console.log(space)\r\n   */\n\n\n  async function getSpace() {\n    switchToSpace(http);\n\n    try {\n      const response = await http.get('/');\n      return wrapSpace(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\r\n   * Gets a Content Type\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {string} id\r\n   * @return {Promise<Entities.ContentType>} Promise for a Content Type\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const contentType = await client.getContentType('<content_type_id>')\r\n   * console.log(contentType)\r\n   */\n\n\n  async function getContentType(id) {\n    switchToEnvironment(http);\n\n    try {\n      const response = await http.get(`content_types/${id}`);\n      return wrapContentType(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\r\n   * Gets a collection of Content Types\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\r\n   * @return {Promise<Entities.ContentTypeCollection>} Promise for a collection of Content Types\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const response = await client.getContentTypes()\r\n   * console.log(response.items)\r\n   */\n\n\n  async function getContentTypes() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    switchToEnvironment(http);\n\n    try {\n      const response = await http.get('content_types', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapContentTypeCollection(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\r\n   * Gets an Entry\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {string} id\r\n   * @param  {Object=} query - Object with search parameters. In this method it's only useful for `locale`.\r\n   * @return {Promise<Entities.Entry>} Promise for an Entry\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const entry = await client.getEntry('<entry_id>')\r\n   * console.log(entry)\r\n   */\n\n\n  async function getEntry(id) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!id) {\n      throw notFoundError(id);\n    }\n\n    try {\n      const response = await this.getEntries(_objectSpread({\n        'sys.id': id\n      }, query));\n\n      if (response.items.length > 0) {\n        return wrapEntry(response.items[0]);\n      } else {\n        throw notFoundError(id);\n      }\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\r\n   * Gets a collection of Entries\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\r\n   * @return {Promise<Entities.EntryCollection>} Promise for a collection of Entries\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const response = await client.getEntries()\r\n   * console.log(response.items)\r\n   */\n\n\n  async function getEntries() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    switchToEnvironment(http);\n    const {\n      resolveLinks,\n      removeUnresolved\n    } = getGlobalOptions(query);\n    query = (0, _normalizeSelect.default)(query);\n\n    try {\n      const response = await http.get('entries', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapEntryCollection(response.data, {\n        resolveLinks,\n        removeUnresolved\n      });\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\r\n   * Gets an Asset\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {string} id\r\n   * @param  {Object=} query - Object with search parameters. In this method it's only useful for `locale`.\r\n   * @return {Promise<Entities.Asset>} Promise for an Asset\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const asset = await client.getAsset('<asset_id>')\r\n   * console.log(asset)\r\n   */\n\n\n  async function getAsset(id) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    switchToEnvironment(http);\n    query = (0, _normalizeSelect.default)(query);\n\n    try {\n      const response = await http.get(`assets/${id}`, (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapAsset(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\r\n   * Gets a collection of Assets\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\r\n   * @return {Promise<Entities.AssetCollection>} Promise for a collection of Assets\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const response = await client.getAssets()\r\n   * console.log(response.items)\r\n   */\n\n\n  async function getAssets() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    switchToEnvironment(http);\n    query = (0, _normalizeSelect.default)(query);\n\n    try {\n      const response = await http.get('assets', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapAssetCollection(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\r\n   * Gets a Tag\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {string} id\r\n   * @return {Promise<Entities.Tag>} Promise for a Tag\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const tag = await client.getTag('<asset_id>')\r\n   * console.log(tag)\r\n   */\n\n\n  async function getTag(id) {\n    switchToEnvironment(http);\n\n    try {\n      const response = await http.get(`tags/${id}`);\n      return wrapTag(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\r\n   * Gets a collection of Tags\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {Object=} query - Object with search parameters.\r\n   * @return {Promise<Entities.TagCollection>} Promise for a collection of Tags\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const response = await client.getTags()\r\n   * console.log(response.items)\r\n   */\n\n\n  async function getTags() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    switchToEnvironment(http);\n    query = (0, _normalizeSelect.default)(query);\n\n    try {\n      const response = await http.get('tags', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapTagCollection(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\r\n   * Creates an asset key for signing asset URLs (Embargoed Assets)\r\n   * @memberof ContentfulClientAPI\r\n   * @param {number} expiresAt - UNIX timestamp in the future, maximum of 48h from now\r\n   * @return {Promise<Entities.AssetKey>} Promise for an AssetKey\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const assetKey = await client.getAssetKey(<UNIX timestamp>)\r\n   * console.log(assetKey)\r\n   */\n\n\n  async function createAssetKey(expiresAt) {\n    switchToEnvironment(http);\n\n    try {\n      const now = Math.floor(Date.now() / 1000);\n      const currentMaxLifetime = now + ASSET_KEY_MAX_LIFETIME;\n      (0, _validateTimestamp.default)('expiresAt', expiresAt, {\n        maximum: currentMaxLifetime,\n        now\n      });\n      const params = {\n        expiresAt\n      };\n      const response = await http.post('asset_keys', params);\n      return wrapAssetKey(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\r\n   * Gets a collection of Locale\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\r\n   * @return {Promise<Entities.LocaleCollection>} Promise for a collection of Locale\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const response = await client.getLocales()\r\n   * console.log(response.items)\r\n   */\n\n\n  async function getLocales() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    switchToEnvironment(http);\n\n    try {\n      const response = await http.get('locales', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapLocaleCollection(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\r\n   * Synchronizes either all the content or only new content since last sync\r\n   * See <a href=\"https://www.contentful.com/developers/docs/concepts/sync/\">Synchronization</a> for more information.\r\n   * <strong> Important note: </strong> The the sync api endpoint does not support include or link resolution.\r\n   * However contentful.js is doing link resolution client side if you only make an initial sync.\r\n   * For the delta sync (using nextSyncToken) it is not possible since the sdk wont have access to all the data to make such an operation.\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {Object} query - Query object for the sync call. One of initial or nextSyncToken always needs to be specified, but not both.\r\n   * @param  {boolean?} query.initial - Indicates if this is the first sync. Use it if you don't have a sync token.\r\n   * @param  {string?} query.nextSyncToken - The token you got the last time you used this method. Ensures you only get changed content.\r\n   * @param  {string=} query.type - Filter by this type (all (default), Entry, Asset, Deletion, DeletedAsset or DeletedEntry)\r\n   * @param  {string=} query.content_type - Filter by this content type id\r\n   * @param  {boolean=} query.resolveLinks - When true, links to other Entries or Assets are resolved. Default: true.\r\n   * @param  {Object} options\r\n   * @param  {boolean=} [options.paginate = true] - Set to false to disable pagination\r\n   * @return {Promise<Sync.SyncCollection>} Promise for the collection resulting of a sync operation\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const response = await client.sync({\r\n   *   initial: true\r\n   * })\r\n   * console.log({\r\n   *   entries: response.entries,\r\n   *   assets: response.assets,\r\n   *   nextSyncToken: response.nextSyncToken\r\n   * })\r\n   */\n\n\n  async function sync() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      paginate: true\n    };\n    const {\n      resolveLinks,\n      removeUnresolved\n    } = getGlobalOptions(query);\n    switchToEnvironment(http);\n    return (0, _pagedSync.default)(http, query, _objectSpread({\n      resolveLinks,\n      removeUnresolved\n    }, options));\n  }\n  /**\r\n  * Parse raw json data into collection of entry objects.Links will be resolved also\r\n  * @memberof ContentfulClientAPI\r\n  * @param {Object} raw json data\r\n  * @example\r\n  * let data = {items: [\r\n  *    {\r\n  *    sys: {type: 'Entry', locale: 'en-US'},\r\n  *    fields: {\r\n  *      animal: {sys: {type: 'Link', linkType: 'Animal', id: 'oink'}},\r\n  *      anotheranimal: {sys: {type: 'Link', linkType: 'Animal', id: 'middle-parrot'}}\r\n  *    }\r\n  *  }\r\n  * ],\r\n  * includes: {\r\n  *  Animal: [\r\n  *    {\r\n  *      sys: {type: 'Animal', id: 'oink', locale: 'en-US'},\r\n  *      fields: {\r\n  *        name: 'Pig',\r\n  *        friend: {sys: {type: 'Link', linkType: 'Animal', id: 'groundhog'}}\r\n  *      }\r\n  *    }\r\n  *   ]\r\n  *  }\r\n  * }\r\n  * console.log( data.items[0].fields.foo ); // undefined\r\n  * let parsedData = client.parseEntries(data);\r\n  * console.log( parsedData.items[0].fields.foo ); // foo\r\n  */\n\n\n  function parseEntries(data) {\n    const {\n      resolveLinks,\n      removeUnresolved\n    } = getGlobalOptions({});\n    return wrapEntryCollection(data, {\n      resolveLinks,\n      removeUnresolved\n    });\n  }\n  /*\r\n   * Switches BaseURL to use /environments path\r\n   * */\n\n\n  function switchToEnvironment(http) {\n    http.defaults.baseURL = getGlobalOptions().environmentBaseUrl;\n  }\n  /*\r\n   * Switches BaseURL to use /spaces path\r\n   * */\n\n\n  function switchToSpace(http) {\n    http.defaults.baseURL = getGlobalOptions().spaceBaseUrl;\n  }\n\n  return {\n    getSpace,\n    getContentType,\n    getContentTypes,\n    getEntry,\n    getEntries,\n    getAsset,\n    getAssets,\n    getTag,\n    getTags,\n    createAssetKey,\n    getLocales,\n    parseEntries,\n    sync\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","createContentfulApi","_contentfulSdkCore","require","_entities","_interopRequireDefault","_pagedSync","_normalizeSelect","_validateTimestamp","obj","__esModule","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","configurable","writable","ASSET_KEY_MAX_LIFETIME","_ref","http","getGlobalOptions","wrapSpace","space","wrapContentType","wrapContentTypeCollection","contentType","wrapEntry","wrapEntryCollection","entry","wrapAsset","wrapAssetCollection","asset","wrapTag","wrapTagCollection","tag","wrapAssetKey","assetKey","wrapLocaleCollection","locale","notFoundError","id","error","Error","sys","type","details","environment","getSpace","switchToSpace","response","get","data","errorHandler","getContentType","switchToEnvironment","getContentTypes","query","undefined","createRequestConfig","getEntry","getEntries","items","resolveLinks","removeUnresolved","getAsset","getAssets","getTag","getTags","createAssetKey","expiresAt","now","Math","floor","Date","currentMaxLifetime","maximum","params","post","getLocales","sync","options","paginate","parseEntries","defaults","baseURL","environmentBaseUrl","spaceBaseUrl"],"sources":["C:/acm/my_repo/node_modules/contentful/dist/es-modules/create-contentful-api.js"],"sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = createContentfulApi;\r\n\r\nvar _contentfulSdkCore = require(\"contentful-sdk-core\");\r\n\r\nvar _entities = _interopRequireDefault(require(\"./entities\"));\r\n\r\nvar _pagedSync = _interopRequireDefault(require(\"./paged-sync\"));\r\n\r\nvar _normalizeSelect = _interopRequireDefault(require(\"./utils/normalize-select\"));\r\n\r\nvar _validateTimestamp = _interopRequireDefault(require(\"./utils/validate-timestamp\"));\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\r\n\r\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\r\n\r\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\r\n\r\nconst ASSET_KEY_MAX_LIFETIME = 48 * 60 * 60;\r\n/**\r\n * Creates API object with methods to access functionality from Contentful's\r\n * Delivery API\r\n * @private\r\n * @param {Object} params - API initialization params\r\n * @prop {Object} http - HTTP client instance\r\n * @prop {Object} entities - Object with wrapper methods for each kind of entity\r\n * @prop {Function} getGlobalOptions - Link resolver preconfigured with global setting\r\n * @return {ClientAPI}\r\n */\r\n\r\nfunction createContentfulApi(_ref) {\r\n  let {\r\n    http,\r\n    getGlobalOptions\r\n  } = _ref;\r\n  const {\r\n    wrapSpace\r\n  } = _entities.default.space;\r\n  const {\r\n    wrapContentType,\r\n    wrapContentTypeCollection\r\n  } = _entities.default.contentType;\r\n  const {\r\n    wrapEntry,\r\n    wrapEntryCollection\r\n  } = _entities.default.entry;\r\n  const {\r\n    wrapAsset,\r\n    wrapAssetCollection\r\n  } = _entities.default.asset;\r\n  const {\r\n    wrapTag,\r\n    wrapTagCollection\r\n  } = _entities.default.tag;\r\n  const {\r\n    wrapAssetKey\r\n  } = _entities.default.assetKey;\r\n  const {\r\n    wrapLocaleCollection\r\n  } = _entities.default.locale;\r\n\r\n  const notFoundError = id => {\r\n    const error = new Error('The resource could not be found.');\r\n    error.sys = {\r\n      type: 'Error',\r\n      id: 'NotFound'\r\n    };\r\n    error.details = {\r\n      type: 'Entry',\r\n      id: id,\r\n      environment: getGlobalOptions().environment,\r\n      space: getGlobalOptions().space\r\n    };\r\n    return error;\r\n  };\r\n  /**\r\n   * Gets the Space which the client is currently configured to use\r\n   * @memberof ContentfulClientAPI\r\n   * @return {Promise<Entities.Space>} Promise for a Space\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   * // returns the space object with the above <space-id>\r\n   * const space = await client.getSpace()\r\n   * console.log(space)\r\n   */\r\n\r\n\r\n  async function getSpace() {\r\n    switchToSpace(http);\r\n\r\n    try {\r\n      const response = await http.get('/');\r\n      return wrapSpace(response.data);\r\n    } catch (error) {\r\n      (0, _contentfulSdkCore.errorHandler)(error);\r\n    }\r\n  }\r\n  /**\r\n   * Gets a Content Type\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {string} id\r\n   * @return {Promise<Entities.ContentType>} Promise for a Content Type\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const contentType = await client.getContentType('<content_type_id>')\r\n   * console.log(contentType)\r\n   */\r\n\r\n\r\n  async function getContentType(id) {\r\n    switchToEnvironment(http);\r\n\r\n    try {\r\n      const response = await http.get(`content_types/${id}`);\r\n      return wrapContentType(response.data);\r\n    } catch (error) {\r\n      (0, _contentfulSdkCore.errorHandler)(error);\r\n    }\r\n  }\r\n  /**\r\n   * Gets a collection of Content Types\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\r\n   * @return {Promise<Entities.ContentTypeCollection>} Promise for a collection of Content Types\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const response = await client.getContentTypes()\r\n   * console.log(response.items)\r\n   */\r\n\r\n\r\n  async function getContentTypes() {\r\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n    switchToEnvironment(http);\r\n\r\n    try {\r\n      const response = await http.get('content_types', (0, _contentfulSdkCore.createRequestConfig)({\r\n        query: query\r\n      }));\r\n      return wrapContentTypeCollection(response.data);\r\n    } catch (error) {\r\n      (0, _contentfulSdkCore.errorHandler)(error);\r\n    }\r\n  }\r\n  /**\r\n   * Gets an Entry\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {string} id\r\n   * @param  {Object=} query - Object with search parameters. In this method it's only useful for `locale`.\r\n   * @return {Promise<Entities.Entry>} Promise for an Entry\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const entry = await client.getEntry('<entry_id>')\r\n   * console.log(entry)\r\n   */\r\n\r\n\r\n  async function getEntry(id) {\r\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n\r\n    if (!id) {\r\n      throw notFoundError(id);\r\n    }\r\n\r\n    try {\r\n      const response = await this.getEntries(_objectSpread({\r\n        'sys.id': id\r\n      }, query));\r\n\r\n      if (response.items.length > 0) {\r\n        return wrapEntry(response.items[0]);\r\n      } else {\r\n        throw notFoundError(id);\r\n      }\r\n    } catch (error) {\r\n      (0, _contentfulSdkCore.errorHandler)(error);\r\n    }\r\n  }\r\n  /**\r\n   * Gets a collection of Entries\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\r\n   * @return {Promise<Entities.EntryCollection>} Promise for a collection of Entries\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const response = await client.getEntries()\r\n   * console.log(response.items)\r\n   */\r\n\r\n\r\n  async function getEntries() {\r\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n    switchToEnvironment(http);\r\n    const {\r\n      resolveLinks,\r\n      removeUnresolved\r\n    } = getGlobalOptions(query);\r\n    query = (0, _normalizeSelect.default)(query);\r\n\r\n    try {\r\n      const response = await http.get('entries', (0, _contentfulSdkCore.createRequestConfig)({\r\n        query: query\r\n      }));\r\n      return wrapEntryCollection(response.data, {\r\n        resolveLinks,\r\n        removeUnresolved\r\n      });\r\n    } catch (error) {\r\n      (0, _contentfulSdkCore.errorHandler)(error);\r\n    }\r\n  }\r\n  /**\r\n   * Gets an Asset\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {string} id\r\n   * @param  {Object=} query - Object with search parameters. In this method it's only useful for `locale`.\r\n   * @return {Promise<Entities.Asset>} Promise for an Asset\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const asset = await client.getAsset('<asset_id>')\r\n   * console.log(asset)\r\n   */\r\n\r\n\r\n  async function getAsset(id) {\r\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n    switchToEnvironment(http);\r\n    query = (0, _normalizeSelect.default)(query);\r\n\r\n    try {\r\n      const response = await http.get(`assets/${id}`, (0, _contentfulSdkCore.createRequestConfig)({\r\n        query: query\r\n      }));\r\n      return wrapAsset(response.data);\r\n    } catch (error) {\r\n      (0, _contentfulSdkCore.errorHandler)(error);\r\n    }\r\n  }\r\n  /**\r\n   * Gets a collection of Assets\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\r\n   * @return {Promise<Entities.AssetCollection>} Promise for a collection of Assets\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const response = await client.getAssets()\r\n   * console.log(response.items)\r\n   */\r\n\r\n\r\n  async function getAssets() {\r\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n    switchToEnvironment(http);\r\n    query = (0, _normalizeSelect.default)(query);\r\n\r\n    try {\r\n      const response = await http.get('assets', (0, _contentfulSdkCore.createRequestConfig)({\r\n        query: query\r\n      }));\r\n      return wrapAssetCollection(response.data);\r\n    } catch (error) {\r\n      (0, _contentfulSdkCore.errorHandler)(error);\r\n    }\r\n  }\r\n  /**\r\n   * Gets a Tag\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {string} id\r\n   * @return {Promise<Entities.Tag>} Promise for a Tag\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const tag = await client.getTag('<asset_id>')\r\n   * console.log(tag)\r\n   */\r\n\r\n\r\n  async function getTag(id) {\r\n    switchToEnvironment(http);\r\n\r\n    try {\r\n      const response = await http.get(`tags/${id}`);\r\n      return wrapTag(response.data);\r\n    } catch (error) {\r\n      (0, _contentfulSdkCore.errorHandler)(error);\r\n    }\r\n  }\r\n  /**\r\n   * Gets a collection of Tags\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {Object=} query - Object with search parameters.\r\n   * @return {Promise<Entities.TagCollection>} Promise for a collection of Tags\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const response = await client.getTags()\r\n   * console.log(response.items)\r\n   */\r\n\r\n\r\n  async function getTags() {\r\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n    switchToEnvironment(http);\r\n    query = (0, _normalizeSelect.default)(query);\r\n\r\n    try {\r\n      const response = await http.get('tags', (0, _contentfulSdkCore.createRequestConfig)({\r\n        query: query\r\n      }));\r\n      return wrapTagCollection(response.data);\r\n    } catch (error) {\r\n      (0, _contentfulSdkCore.errorHandler)(error);\r\n    }\r\n  }\r\n  /**\r\n   * Creates an asset key for signing asset URLs (Embargoed Assets)\r\n   * @memberof ContentfulClientAPI\r\n   * @param {number} expiresAt - UNIX timestamp in the future, maximum of 48h from now\r\n   * @return {Promise<Entities.AssetKey>} Promise for an AssetKey\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const assetKey = await client.getAssetKey(<UNIX timestamp>)\r\n   * console.log(assetKey)\r\n   */\r\n\r\n\r\n  async function createAssetKey(expiresAt) {\r\n    switchToEnvironment(http);\r\n\r\n    try {\r\n      const now = Math.floor(Date.now() / 1000);\r\n      const currentMaxLifetime = now + ASSET_KEY_MAX_LIFETIME;\r\n      (0, _validateTimestamp.default)('expiresAt', expiresAt, {\r\n        maximum: currentMaxLifetime,\r\n        now\r\n      });\r\n      const params = {\r\n        expiresAt\r\n      };\r\n      const response = await http.post('asset_keys', params);\r\n      return wrapAssetKey(response.data);\r\n    } catch (error) {\r\n      (0, _contentfulSdkCore.errorHandler)(error);\r\n    }\r\n  }\r\n  /**\r\n   * Gets a collection of Locale\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\r\n   * @return {Promise<Entities.LocaleCollection>} Promise for a collection of Locale\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const response = await client.getLocales()\r\n   * console.log(response.items)\r\n   */\r\n\r\n\r\n  async function getLocales() {\r\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n    switchToEnvironment(http);\r\n\r\n    try {\r\n      const response = await http.get('locales', (0, _contentfulSdkCore.createRequestConfig)({\r\n        query: query\r\n      }));\r\n      return wrapLocaleCollection(response.data);\r\n    } catch (error) {\r\n      (0, _contentfulSdkCore.errorHandler)(error);\r\n    }\r\n  }\r\n  /**\r\n   * Synchronizes either all the content or only new content since last sync\r\n   * See <a href=\"https://www.contentful.com/developers/docs/concepts/sync/\">Synchronization</a> for more information.\r\n   * <strong> Important note: </strong> The the sync api endpoint does not support include or link resolution.\r\n   * However contentful.js is doing link resolution client side if you only make an initial sync.\r\n   * For the delta sync (using nextSyncToken) it is not possible since the sdk wont have access to all the data to make such an operation.\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {Object} query - Query object for the sync call. One of initial or nextSyncToken always needs to be specified, but not both.\r\n   * @param  {boolean?} query.initial - Indicates if this is the first sync. Use it if you don't have a sync token.\r\n   * @param  {string?} query.nextSyncToken - The token you got the last time you used this method. Ensures you only get changed content.\r\n   * @param  {string=} query.type - Filter by this type (all (default), Entry, Asset, Deletion, DeletedAsset or DeletedEntry)\r\n   * @param  {string=} query.content_type - Filter by this content type id\r\n   * @param  {boolean=} query.resolveLinks - When true, links to other Entries or Assets are resolved. Default: true.\r\n   * @param  {Object} options\r\n   * @param  {boolean=} [options.paginate = true] - Set to false to disable pagination\r\n   * @return {Promise<Sync.SyncCollection>} Promise for the collection resulting of a sync operation\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const response = await client.sync({\r\n   *   initial: true\r\n   * })\r\n   * console.log({\r\n   *   entries: response.entries,\r\n   *   assets: response.assets,\r\n   *   nextSyncToken: response.nextSyncToken\r\n   * })\r\n   */\r\n\r\n\r\n  async function sync() {\r\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\r\n      paginate: true\r\n    };\r\n    const {\r\n      resolveLinks,\r\n      removeUnresolved\r\n    } = getGlobalOptions(query);\r\n    switchToEnvironment(http);\r\n    return (0, _pagedSync.default)(http, query, _objectSpread({\r\n      resolveLinks,\r\n      removeUnresolved\r\n    }, options));\r\n  }\r\n  /**\r\n  * Parse raw json data into collection of entry objects.Links will be resolved also\r\n  * @memberof ContentfulClientAPI\r\n  * @param {Object} raw json data\r\n  * @example\r\n  * let data = {items: [\r\n  *    {\r\n  *    sys: {type: 'Entry', locale: 'en-US'},\r\n  *    fields: {\r\n  *      animal: {sys: {type: 'Link', linkType: 'Animal', id: 'oink'}},\r\n  *      anotheranimal: {sys: {type: 'Link', linkType: 'Animal', id: 'middle-parrot'}}\r\n  *    }\r\n  *  }\r\n  * ],\r\n  * includes: {\r\n  *  Animal: [\r\n  *    {\r\n  *      sys: {type: 'Animal', id: 'oink', locale: 'en-US'},\r\n  *      fields: {\r\n  *        name: 'Pig',\r\n  *        friend: {sys: {type: 'Link', linkType: 'Animal', id: 'groundhog'}}\r\n  *      }\r\n  *    }\r\n  *   ]\r\n  *  }\r\n  * }\r\n  * console.log( data.items[0].fields.foo ); // undefined\r\n  * let parsedData = client.parseEntries(data);\r\n  * console.log( parsedData.items[0].fields.foo ); // foo\r\n  */\r\n\r\n\r\n  function parseEntries(data) {\r\n    const {\r\n      resolveLinks,\r\n      removeUnresolved\r\n    } = getGlobalOptions({});\r\n    return wrapEntryCollection(data, {\r\n      resolveLinks,\r\n      removeUnresolved\r\n    });\r\n  }\r\n  /*\r\n   * Switches BaseURL to use /environments path\r\n   * */\r\n\r\n\r\n  function switchToEnvironment(http) {\r\n    http.defaults.baseURL = getGlobalOptions().environmentBaseUrl;\r\n  }\r\n  /*\r\n   * Switches BaseURL to use /spaces path\r\n   * */\r\n\r\n\r\n  function switchToSpace(http) {\r\n    http.defaults.baseURL = getGlobalOptions().spaceBaseUrl;\r\n  }\r\n\r\n  return {\r\n    getSpace,\r\n    getContentType,\r\n    getContentTypes,\r\n    getEntry,\r\n    getEntries,\r\n    getAsset,\r\n    getAssets,\r\n    getTag,\r\n    getTags,\r\n    createAssetKey,\r\n    getLocales,\r\n    parseEntries,\r\n    sync\r\n  };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}